package com.example.hospitalapp;
// "package" — ключевое слово, объявляет пакет, в котором находится класс.
// "com.example.hospitalapp" — имя пакета, где "com" — домен верхнего уровня, "example" — поддомен, "hospitalapp" — имя приложения.
// Пакет используется для организации классов и избежания конфликтов имен.

public class Doctor {
    // "public" — модификатор доступа, делает класс доступным из других классов.
    // "class" — ключевое слово, объявляет новый класс.
    // "Doctor" — имя класса, отражает его назначение (класс для представления врача).
    // "{" — открывающая фигурная скобка, начало тела класса.

    private int id;
    // "private" — модификатор доступа, делает переменную доступной только внутри класса.
    // "int" — примитивный тип данных, целое число (32 бита).
    // "id" — имя переменной, будет хранить идентификатор врача.
    // ";" — точка с запятой, завершает инструкцию.

    private String firstName;
    // "private" — модификатор доступа, делает переменную доступной только внутри класса.
    // "String" — класс из пакета java.lang, представляет строку.
    // "firstName" — имя переменной, будет хранить имя врача.
    // ";" — точка с запятой, завершает инструкцию.

    private String lastName;
    // "private" — модификатор доступа, делает переменную доступной только внутри класса.
    // "String" — класс, представляет строку.
    // "lastName" — имя переменной, будет хранить фамилию врача.
    // ";" — точка с запятой, завершает инструкцию.

    private String middleName;
    // "private" — модификатор доступа, делает переменную доступной только внутри класса.
    // "String" — класс, представляет строку.
    // "middleName" — имя переменной, будет хранить отчество врача.
    // ";" — точка с запятой, завершает инструкцию.

    private String specialization;
    // "private" — модификатор доступа, делает переменную доступной только внутри класса.
    // "String" — класс, представляет строку.
    // "specialization" — имя переменной, будет хранить специальность врача.
    // ";" — точка с запятой, завершает инструкцию.

    public Doctor(int id, String firstName, String lastName, String middleName, String specialization) {
        // "public" — модификатор доступа, делает конструктор доступным из других классов.
        // "Doctor" — имя конструктора, совпадает с именем класса.
        // "(" — открывающая скобка, начало списка параметров.
        // "int id" — параметр типа int, идентификатор врача.
        // "," — запятая, разделяет параметры.
        // "String firstName" — параметр типа String, имя врача.
        // "String lastName" — параметр типа String, фамилия врача.
        // "String middleName" — параметр типа String, отчество врача.
        // "String specialization" — параметр типа String, специальность врача.
        // ")" — закрывающая скобка, конец списка параметров.
        // "{" — открывающая фигурная скобка, начало тела конструктора.

        this.id = id;
        // "this" — ключевое слово, ссылается на текущий объект класса.
        // "." — оператор доступа, используется для обращения к полям объекта.
        // "id" — поле класса, переменная экземпляра.
        // "=" — оператор присваивания, присваивает значение справа переменной слева.
        // "id" — параметр конструктора, локальная переменная.
        // ";" — точка с запятой, завершает инструкцию.
        // Эта строка присваивает значение параметра id полю класса id.

        this.firstName = firstName;
        // "this" — ключевое слово, ссылается на текущий объект.
        // "firstName" — поле класса.
        // "=" — оператор присваивания.
        // "firstName" — параметр конструктора.
        // ";" — точка с запятой, завершает инструкцию.
        // Присваивает значение параметра firstName полю класса firstName.

        this.lastName = lastName;
        // "this" — ключевое слово, ссылается на текущий объект.
        // "lastName" — поле класса.
        // "=" — оператор присваивания.
        // "lastName" — параметр конструктора.
        // ";" — точка с запятой, завершает инструкцию.
        // Присваивает значение параметра lastName полю класса lastName.

        this.middleName = middleName;
        // "this" — ключевое слово, ссылается на текущий объект.
        // "middleName" — поле класса.
        // "=" — оператор присваивания.
        // "middleName" — параметр конструктора.
        // ";" — точка с запятой, завершает инструкцию.
        // Присваивает значение параметра middleName полю класса middleName.

        this.specialization = specialization;
        // "this" — ключевое слово, ссылается на текущий объект.
        // "specialization" — поле класса.
        // "=" — оператор присваивания.
        // "specialization" — параметр конструктора.
        // ";" — точка с запятой, завершает инструкцию.
        // Присваивает значение параметра specialization полю класса specialization.

    }
    // "}" — закрывающая фигурная скобка, конец тела конструктора.

    public int getId() {
        // "public" — модификатор доступа, делает метод доступным из других классов.
        // "int" — тип возвращаемого значения, метод возвращает целое число.
        // "getId" — имя метода, геттер для получения значения поля id.
        // "()" — скобки, метод не принимает параметров.
        // "{" — открывающая фигурная скобка, начало тела метода.

        return id;
        // "return" — ключевое слово, возвращает значение из метода.
        // "id" — поле класса, значение которого возвращается.
        // ";" — точка с запятой, завершает инструкцию.
        // Этот метод возвращает значение поля id.

    }
    // "}" — закрывающая фигурная скобка, конец тела метода.

    public String getFirstName() {
        // "public" — модификатор доступа, делает метод доступным из других классов.
        // "String" — тип возвращаемого значения, метод возвращает строку.
        // "getFirstName" — имя метода, геттер для получения значения поля firstName.
        // "()" — скобки, метод не принимает параметров.
        // "{" — открывающая фигурная скобка, начало тела метода.

        return firstName;
        // "return" — ключевое слово, возвращает значение.
        // "firstName" — поле класса, значение которого возвращается.
        // ";" — точка с запятой, завершает инструкцию.
        // Этот метод возвращает значение поля firstName.

    }
    // "}" — закрывающая фигурная скобка, конец тела метода.

    public String getLastName() {
        // "public" — модификатор доступа, делает метод доступным из других классов.
        // "String" — тип возвращаемого значения, метод возвращает строку.
        // "getLastName" — имя метода, геттер для получения значения поля lastName.
        // "()" — скобки, метод не принимает параметров.
        // "{" — открывающая фигурная скобка, начало тела метода.

        return lastName;
        // "return" — ключевое слово, возвращает значение.
        // "lastName" — поле класса, значение которого возвращается.
        // ";" — точка с запятой, завершает инструкцию.
        // Этот метод возвращает значение поля lastName.

    }
    // "}" — закрывающая фигурная скобка, конец тела метода.

    public String getMiddleName() {
        // "public" — модификатор доступа, делает метод доступным из других классов.
        // "String" — тип возвращаемого значения, метод возвращает строку.
        // "getMiddleName" — имя метода, геттер для получения значения поля middleName.
        // "()" — скобки, метод не принимает параметров.
        // "{" — открывающая фигурная скобка, начало тела метода.

        return middleName;
        // "return" — ключевое слово, возвращает значение.
        // "middleName" — поле класса, значение которого возвращается.
        // ";" — точка с запятой, завершает инструкцию.
        // Этот метод возвращает значение поля middleName.

    }
    // "}" — закрывающая фигурная скобка, конец тела метода.

    public String getSpecialization() {
        // "public" — модификатор доступа, делает метод доступным из других классов.
        // "String" — тип возвращаемого значения, метод возвращает строку.
        // "getSpecialization" — имя метода, геттер для получения значения поля specialization.
        // "()" — скобки, метод не принимает параметров.
        // "{" — открывающая фигурная скобка, начало тела метода.

        return specialization;
        // "return" — ключевое слово, возвращает значение.
        // "specialization" — поле класса, значение которого возвращается.
        // ";" — точка с запятой, завершает инструкцию.
        // Этот метод возвращает значение поля specialization.

    }
    // "}" — закрывающая фигурная скобка, конец тела метода.

    @Override
    // "@Override" — аннотация, указывает, что метод переопределяет метод из родительского класса.
    // В данном случае переопределяется метод toString() из класса Object.

    public String toString() {
        // "public" — модификатор доступа, делает метод доступным из других классов.
        // "String" — тип возвращаемого значения, метод возвращает строку.
        // "toString" — имя метода, переопределяет метод toString() из класса Object.
        // "()" — скобки, метод не принимает параметров.
        // "{" — открывающая фигурная скобка, начало тела метода.

        return lastName + " " + firstName + " " + middleName + " (" + specialization + ")";
        // "return" — ключевое слово, возвращает значение.
        // "lastName" — поле класса, фамилия врача.
        // "+" — оператор конкатенации строк, объединяет строки.
        // " " — строка, пробел.
        // "firstName" — поле класса, имя врача.
        // "middleName" — поле класса, отчество врача.
        // "(" — строка, открывающая скобка.
        // "specialization" — поле класса, специальность врача.
        // ")" — строка, закрывающая скобка.
        // ";" — точка с запятой, завершает инструкцию.
        // Этот метод возвращает строку вида "Фамилия Имя Отчество (Специальность)".

    }
    // "}" — закрывающая фигурная скобка, конец тела метода.

}
